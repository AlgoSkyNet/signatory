################################################
###                                          ###
### THIS FILE IS AUTOGENERATED. DO NOT EDIT. ###
###                                          ###
################################################

# Deploys and tests an accepted pull request

name: Deploy and test

# Arguments:
# event_name: pull_request
# event_cond: github.event.pull_request.merged
# trigger: deploy

on:
  repository_dispatch:
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  # we need to do this first as all the linux versions install the same thing from PyPI
  deploy_sdist:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04]
        python-version: [3.7.0]
    
    steps:
    - name: Checkout code
      if: ((github.event_name == 'pull_request' && (github.event.pull_request.merged)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger deploy ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7') && matrix.python-version == '2.7') || (contains(github.event.action, '-pv 3.5.0') && matrix.python-version == '3.5.0') || (contains(github.event.action, '-pv 3.6.0') && matrix.python-version == '3.6.0') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/checkout@v1
      with:
        ref: master

    - name: Install Python
      if: ((github.event_name == 'pull_request' && (github.event.pull_request.merged)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger deploy ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7') && matrix.python-version == '2.7') || (contains(github.event.action, '-pv 3.5.0') && matrix.python-version == '3.5.0') || (contains(github.event.action, '-pv 3.6.0') && matrix.python-version == '3.6.0') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Linux
      if: ((github.event_name == 'pull_request' && (github.event.pull_request.merged)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger deploy ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7') && matrix.python-version == '2.7') || (contains(github.event.action, '-pv 3.5.0') && matrix.python-version == '3.5.0') || (contains(github.event.action, '-pv 3.6.0') && matrix.python-version == '3.6.0') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *')))) && (matrix.os == 'ubuntu-16.04')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      # Deliberately only creating an sdist; see FAQ
      run: |
        set -x
        . $CONDA/etc/profile.d/conda.sh
        conda create -n myenv python=$PYTHON_VERSION -y
        conda activate myenv
        python -m pip install --upgrade pip
        conda install pytorch -c pytorch -y
        python command.py should_not_import
        python setup.py sdist
        pip install twine
        twine upload -u patrick-kidger -p ${{ secrets.pypi_password }} --repository-url https://test.pypi.org/legacy/ dist/*
      
 
  deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2016, ubuntu-16.04, macOS-10.14]
        python-version: [2.7, 3.5.0, 3.6.0, 3.7.0]
        exclude:
          # PyTorch doesn't support this combination
          - os: windows-2016
            python-version: 2.7
      fail-fast: false
    needs: [deploy_sdist]
    steps:
    - name: Checkout code
      if: ((github.event_name == 'pull_request' && (github.event.pull_request.merged)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger deploy ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7') && matrix.python-version == '2.7') || (contains(github.event.action, '-pv 3.5.0') && matrix.python-version == '3.5.0') || (contains(github.event.action, '-pv 3.6.0') && matrix.python-version == '3.6.0') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/checkout@v1
      with:
        ref: master
        
    - name: Install Python
      if: ((github.event_name == 'pull_request' && (github.event.pull_request.merged)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger deploy ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7') && matrix.python-version == '2.7') || (contains(github.event.action, '-pv 3.5.0') && matrix.python-version == '3.5.0') || (contains(github.event.action, '-pv 3.6.0') && matrix.python-version == '3.6.0') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Windows
      if: ((github.event_name == 'pull_request' && (github.event.pull_request.merged)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger deploy ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7') && matrix.python-version == '2.7') || (contains(github.event.action, '-pv 3.5.0') && matrix.python-version == '3.5.0') || (contains(github.event.action, '-pv 3.6.0') && matrix.python-version == '3.6.0') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *')))) && (matrix.os == 'windows-2016')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      shell: cmd
      # && chaining seems to be the best (only?) way to run multiple commands in a cmd shell
      # It also means that if any command fails then the step as a whole should correctly
      # have a nonzero (fail) return code
      run: >
        "C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Auxiliary/Build/vcvars64.bat" &&
        %CONDA%/Scripts/conda create -n myenv python=%PYTHON_VERSION% -y &&
        %CONDA%/Scripts/activate myenv &&
        python -m pip install --upgrade pip &&
        conda install pytorch -c pytorch -y &&
        python command.py should_not_import &&
        python setup.py bdist_wheel &&
        pip install twine &&
        twine upload -u patrick-kidger -p ${{ secrets.pypi_password }} --repository-url https://test.pypi.org/legacy/ dist/* &&
        python -c "import subprocess;
        import sys;
        import time;
        import metadata;
        sleep = lambda t: time.sleep(t) or True;
        retry = lambda fn: fn() or (sleep(20) and fn()) or (sleep(40) and fn()) or (sleep(120) and fn()) or (sleep(240) and fn());
        ret = retry(lambda: not subprocess.run('python -m pip install --index-url https://test.pypi.org/simple/ signatory=={} --only-binary signatory'.format(metadata.version)).returncode);
        sys.exit(not ret)
        " &&
        python -m pip install iisignature &&
        python -c "import os;
        import subprocess;
        import sys;
        print(sys.version);
        returncode_test = subprocess.Popen('python command.py test', shell=True).wait();
        returncode_version = sys.version[:3] != os.environ['PYTHON_VERSION'];
        sys.exit(max(returncode_test, returncode_version))
        " &&
        echo done

    - name: Linux
      if: ((github.event_name == 'pull_request' && (github.event.pull_request.merged)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger deploy ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7') && matrix.python-version == '2.7') || (contains(github.event.action, '-pv 3.5.0') && matrix.python-version == '3.5.0') || (contains(github.event.action, '-pv 3.6.0') && matrix.python-version == '3.6.0') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *')))) && (matrix.os == 'ubuntu-16.04')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      # Deliberately only creating an sdist; see FAQ
      run: |
        set -x
        . $CONDA/etc/profile.d/conda.sh
        conda create -n myenv python=$PYTHON_VERSION -y
        conda activate myenv
        python -m pip install --upgrade pip
        conda install pytorch -c pytorch -y
        python command.py should_not_import
        retry () { $* || (sleep 20 && $*) || (sleep 40 && $*) || (sleep 120 && $*) || (sleep 240 && $*); }
        SIGNATORY_VERSION=$(python -c "import metadata; print(metadata.version)")
        retry python -m pip install --index-url https://test.pypi.org/simple/ signatory==$SIGNATORY_VERSION --no-binary signatory
        python -m pip install iisignature
        python -c "import os
        import subprocess
        import sys
        print(sys.version)
        returncode_test = subprocess.Popen('python command.py test', shell=True).wait()
        returncode_version = sys.version[:3] != os.environ['PYTHON_VERSION']
        sys.exit(max(returncode_test, returncode_version))
        " 
      

    - name: Mac
      if: ((github.event_name == 'pull_request' && (github.event.pull_request.merged)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger deploy ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7') && matrix.python-version == '2.7') || (contains(github.event.action, '-pv 3.5.0') && matrix.python-version == '3.5.0') || (contains(github.event.action, '-pv 3.6.0') && matrix.python-version == '3.6.0') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *')))) && (matrix.os == 'macOS-10.14')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        set -x
        echo 'set -ex
        . $CONDA/etc/profile.d/conda.sh
        conda create -n myenv python=$PYTHON_VERSION -y
        conda activate myenv
        python -m pip install --upgrade pip
        conda install pytorch -c pytorch -y
        python command.py should_not_import
        MACOSX_DEPLOYMENT_TARGET=10.9 CC=clang CXX=clang++ python setup.py bdist_wheel
        pip install twine
        twine upload -u patrick-kidger -p ${{ secrets.pypi_password }} --repository-url https://test.pypi.org/legacy/ dist/*
        retry () { $* || (sleep 20 && $*) || (sleep 40 && $*) || (sleep 120 && $*) || (sleep 240 && $*); }
        SIGNATORY_VERSION=$(python -c "import metadata; print(metadata.version)")
        retry python -m pip install --index-url https://test.pypi.org/simple/ signatory==$SIGNATORY_VERSION --only-binary signatory
        git clone https://github.com/bottler/iisignature.git
        cd iisignature
        python setup.py install
        cd ..
        rm -rf iisignature
        python -c "import os
        import subprocess
        import sys
        print(sys.version)
        returncode_test = subprocess.Popen('\''python command.py test'\'', shell=True).wait()
        returncode_version = sys.version[:3] != os.environ['\''PYTHON_VERSION'\'']
        sys.exit(max(returncode_test, returncode_version))
        " 
        ' > $GITHUB_WORKSPACE/to_run.sh
        chmod +x $GITHUB_WORKSPACE/to_run.sh
        sudo -s -H -E $GITHUB_WORKSPACE/to_run.sh
