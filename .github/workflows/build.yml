################################################
###                                          ###
### THIS FILE IS AUTOGENERATED. DO NOT EDIT. ###
###                                          ###
################################################

# Builds and tests a pull request

name: Build and test

# Arguments:
# event_name: pull_request
# event_cond: true
# trigger: -not-available-  # not available via repository_dispatch (there's no pull request to test!)


on:
  repository_dispatch:
  pull_request:
    branches:
      - master
    

jobs:
  check_version:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04]
        python-version: [3.7.0]
        pytorch-version: [1.2.0]
    
    steps:
    - name: Checkout code
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/checkout@v1

    - name: Install Python
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Check version
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      run: |
        python -c "import itertools as it
        import re
        import subprocess
        import sys
        import metadata
        version_msg = subprocess.run('pip install signatory==', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print('Version msg: ', version_msg)
        version_re = re.compile(rb'from versions: ([0-9\. ,]*)\)')
        last_version = version_re.search(version_msg.stderr).group(1).split(b', ')[-1]
        print('Last version: ', last_version)
        print('This version: ', metadata.version)
        last_version = [int(i) for i in last_version.split(b'.')]
        this_version = [int(i) for i in metadata.version.split('.')]
        last_version_ = [l for t, l in it.zip_longest(this_version, last_version, fillvalue=0)]
        this_version_ = [t for t, l in it.zip_longest(this_version, last_version, fillvalue=0)]
        sys.exit(tuple(this_version_) <= tuple(last_version_))
        "
  
  
  check_readme:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04]
        python-version: [3.7.0]
        pytorch-version: [1.2.0]
    
    steps:
    - name: Checkout code
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/checkout@v1

    - name: Install Python
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Compare READMEs
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      run: |
        cp README.rst README.rst.old
        python command.py genreadme
        python -c "import io
        import sys
        readme = io.open('README.rst', 'r', encoding='utf-8')
        readme_old = io.open('README.rst.old', 'r', encoding='utf-8')
        sys.exit(readme.read() != readme_old.read())
        "
  

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2016, ubuntu-16.04, macOS-10.14]
        python-version: [2.7.13, 3.5.4, 3.6.2, 3.7.0]
        pytorch-version: [1.2.0]
        exclude:
          # PyTorch doesn't support this combination
          - os: windows-2016
            python-version: 2.7.13
      fail-fast: false
    needs: [check_version, check_readme]
    steps:
    - name: Checkout code
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/checkout@v1
      
    - name: Install Python
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *'))))
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Windows
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *')))) && (matrix.os == 'windows-2016')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      shell: cmd
      # && chaining seems to be the best (only?) way to run multiple commands in a cmd shell
      # It also means that if any command fails then the step as a whole should correctly
      # have a nonzero (fail) return code
      run: >
        "C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Auxiliary/Build/vcvars64.bat" &&
        %CONDA%/Scripts/conda create -n myenv python=%PYTHON_VERSION% -y &&
        %CONDA%/Scripts/activate myenv &&
        python -m pip install --upgrade pip &&
        conda install pytorch==${{ matrix.pytorch-version }} -c pytorch -y &&
        python command.py should_not_import &&
        python setup.py bdist_wheel &&
        for %%f in (./dist/*) do (python -m pip install ./dist/%%~nxf) &&
        python -m pip install iisignature &&
        python -c "import os;
        import subprocess;
        import sys;
        print(sys.version);
        returncode_test = subprocess.Popen('python command.py test', shell=True).wait();
        returncode_version = sys.version[:5] != os.environ['PYTHON_VERSION'][:5];
        sys.exit(max(returncode_test, returncode_version))
        " &&
        echo done

    - name: Linux
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *')))) && (matrix.os == 'ubuntu-16.04')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      # Deliberately only creating an sdist; see FAQ
      run: |
        set -x
        . $CONDA/etc/profile.d/conda.sh
        conda create -n myenv python=$PYTHON_VERSION -y
        conda activate myenv
        python -m pip install --upgrade pip
        conda install pytorch==${{ matrix.pytorch-version }} -c pytorch -y
        python command.py should_not_import
        python setup.py sdist
        SIGNATORY_INSTALLED=$(python -c "import os
        import sys
        x = os.listdir('dist')
        print(x[0])
        sys.exit(len(x) != 1)")
        python -m pip install ./dist/$SIGNATORY_INSTALLED
        python -m pip install iisignature
        python -c "import os
        import subprocess
        import sys
        print(sys.version)
        returncode_test = subprocess.Popen('python command.py test', shell=True).wait()
        returncode_version = sys.version[:5] != os.environ['PYTHON_VERSION'][:5]
        sys.exit(max(returncode_test, returncode_version))
        " 
      

    - name: Mac
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-16.04') && matrix.os == 'ubuntu-16.04') || (contains(github.event.action, '-os macOS-10.14') && matrix.os == 'macOS-10.14') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 2.7.13') && matrix.python-version == '2.7.13') || (contains(github.event.action, '-pv 3.5.4') && matrix.python-version == '3.5.4') || (contains(github.event.action, '-pv 3.6.2') && matrix.python-version == '3.6.2') || (contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || contains(github.event.action, '-pv *')))) && (matrix.os == 'macOS-10.14')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        set -x
        echo 'set -ex
        . $CONDA/etc/profile.d/conda.sh
        conda create -n myenv python=$PYTHON_VERSION -y
        conda activate myenv
        python -m pip install --upgrade pip
        conda install pytorch==${{ matrix.pytorch-version }} -c pytorch -y
        python command.py should_not_import
        MACOSX_DEPLOYMENT_TARGET=10.9 CC=clang CXX=clang++ python setup.py bdist_wheel
        SIGNATORY_INSTALLED=$(python -c "import os
        import sys
        x = os.listdir('\''dist'\'')
        print(x[0])
        sys.exit(len(x) != 1)")
        python -m pip install ./dist/$SIGNATORY_INSTALLED
        git clone https://github.com/bottler/iisignature.git
        cd iisignature
        python setup.py install
        cd ..
        rm -rf iisignature
        python -c "import os
        import subprocess
        import sys
        print(sys.version)
        returncode_test = subprocess.Popen('\''python command.py test'\'', shell=True).wait()
        returncode_version = sys.version[:5] != os.environ['\''PYTHON_VERSION'\''][:5]
        sys.exit(max(returncode_test, returncode_version))
        " 
        ' > $GITHUB_WORKSPACE/to_run.sh
        chmod +x $GITHUB_WORKSPACE/to_run.sh
        sudo -s -H -E $GITHUB_WORKSPACE/to_run.sh

